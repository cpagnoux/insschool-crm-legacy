-- MySQL Script generated by MySQL Workbench
-- mar. 17 mai 2016 01:21:25 CEST
-- Model: INS School    Version: 1.0
-- MySQL Workbench Forward Engineering

SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0;
SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0;
SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='TRADITIONAL,ALLOW_INVALID_DATES';

-- -----------------------------------------------------
-- Schema ins_school
-- -----------------------------------------------------

-- -----------------------------------------------------
-- Schema ins_school
-- -----------------------------------------------------
CREATE SCHEMA IF NOT EXISTS `ins_school` DEFAULT CHARACTER SET utf8 ;
USE `ins_school` ;

-- -----------------------------------------------------
-- Table `ins_school`.`member`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `ins_school`.`member` (
  `member_id` SMALLINT UNSIGNED NOT NULL AUTO_INCREMENT,
  `first_name` VARCHAR(45) NOT NULL,
  `last_name` VARCHAR(45) NOT NULL,
  `birth_date` DATE NULL,
  `adress` VARCHAR(255) NULL,
  `postal_code` CHAR(5) NULL,
  `city` VARCHAR(45) NULL,
  `cellphone` CHAR(10) NULL,
  `cellphone_father` CHAR(10) NULL,
  `cellphone_mother` CHAR(10) NULL,
  `phone` CHAR(10) NULL,
  `email` VARCHAR(100) NULL,
  `volunteer` TINYINT(1) NOT NULL DEFAULT 0,
  PRIMARY KEY (`member_id`),
  UNIQUE INDEX `last_name_first_name_UNIQUE` (`last_name` ASC, `first_name` ASC))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `ins_school`.`file`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `ins_school`.`file` (
  `file_id` SMALLINT UNSIGNED NOT NULL AUTO_INCREMENT,
  `member_id` SMALLINT UNSIGNED NOT NULL,
  `medical_certificate` TINYINT(1) NOT NULL DEFAULT 0,
  `insurance` TINYINT(1) NOT NULL DEFAULT 0,
  `photo` TINYINT(1) NOT NULL DEFAULT 0,
  PRIMARY KEY (`file_id`),
  UNIQUE INDEX `member_id_UNIQUE` (`member_id` ASC))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `ins_school`.`teacher`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `ins_school`.`teacher` (
  `teacher_id` TINYINT UNSIGNED NOT NULL AUTO_INCREMENT,
  `first_name` VARCHAR(45) NOT NULL,
  `last_name` VARCHAR(45) NOT NULL,
  `adress` VARCHAR(255) NULL,
  `postal_code` CHAR(5) NULL,
  `city` VARCHAR(45) NULL,
  `cellphone` CHAR(10) NULL,
  `phone` CHAR(10) NULL,
  `email` VARCHAR(100) NULL,
  `absences` TINYINT UNSIGNED NOT NULL DEFAULT 0,
  PRIMARY KEY (`teacher_id`),
  UNIQUE INDEX `last_name_first_name_UNIQUE` (`last_name` ASC, `first_name` ASC))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `ins_school`.`room`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `ins_school`.`room` (
  `room_id` TINYINT UNSIGNED NOT NULL AUTO_INCREMENT,
  `name` VARCHAR(45) NOT NULL,
  `adress` VARCHAR(255) NULL,
  `postal_code` CHAR(5) NULL,
  `city` VARCHAR(45) NULL,
  `view_order` TINYINT UNSIGNED NOT NULL,
  PRIMARY KEY (`room_id`),
  UNIQUE INDEX `name_UNIQUE` (`name` ASC),
  UNIQUE INDEX `view_order_UNIQUE` (`view_order` ASC))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `ins_school`.`lesson`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `ins_school`.`lesson` (
  `lesson_id` TINYINT UNSIGNED NOT NULL AUTO_INCREMENT,
  `title` VARCHAR(45) NOT NULL,
  `teacher_id` TINYINT UNSIGNED NOT NULL,
  `day` ENUM('LUNDI', 'MARDI', 'MERCREDI', 'JEUDI', 'VENDREDI') NOT NULL,
  `start_time` TIME NOT NULL,
  `end_time` TIME NOT NULL,
  `room_id` TINYINT UNSIGNED NOT NULL,
  `costume` TEXT NULL,
  `t_shirt` TEXT NULL,
  PRIMARY KEY (`lesson_id`),
  UNIQUE INDEX `title_UNIQUE` (`title` ASC),
  UNIQUE INDEX `day_start_time_end_time_room_id_UNIQUE` (`day` ASC, `start_time` ASC, `end_time` ASC, `room_id` ASC),
  INDEX `fk_teacher_id_idx` (`teacher_id` ASC),
  INDEX `fk_room_id_idx` (`room_id` ASC))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `ins_school`.`registration`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `ins_school`.`registration` (
  `registration_id` SMALLINT UNSIGNED NOT NULL AUTO_INCREMENT,
  `member_id` SMALLINT UNSIGNED NOT NULL,
  `season` CHAR(9) NOT NULL,
  `formula` TINYINT UNSIGNED NULL,
  `price` DECIMAL(5,2) NULL,
  `discount` TINYINT UNSIGNED NULL,
  `payments` TINYINT UNSIGNED NULL,
  PRIMARY KEY (`registration_id`),
  UNIQUE INDEX `member_id_season_UNIQUE` (`member_id` ASC, `season` ASC))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `ins_school`.`payment`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `ins_school`.`payment` (
  `payment_id` SMALLINT UNSIGNED NOT NULL AUTO_INCREMENT,
  `registration_id` SMALLINT UNSIGNED NOT NULL,
  `mode` ENUM('ESP', 'CHQ') NOT NULL,
  `amount` DECIMAL(5,2) NOT NULL,
  `date` DATE NOT NULL,
  PRIMARY KEY (`payment_id`),
  INDEX `fk_registration_id_idx` (`registration_id` ASC))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `ins_school`.`participates`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `ins_school`.`participates` (
  `member_id` SMALLINT UNSIGNED NOT NULL,
  `lesson_id` TINYINT UNSIGNED NOT NULL,
  `show_participation` TINYINT(1) NULL,
  PRIMARY KEY (`member_id`, `lesson_id`),
  INDEX `fk_lesson_id_idx` (`lesson_id` ASC))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `ins_school`.`pre_registration`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `ins_school`.`pre_registration` (
  `pre_registration_id` SMALLINT UNSIGNED NOT NULL AUTO_INCREMENT,
  `first_name` VARCHAR(45) NOT NULL,
  `last_name` VARCHAR(45) NOT NULL,
  `birth_date` DATE NOT NULL,
  `adress` VARCHAR(255) NOT NULL,
  `postal_code` CHAR(5) NOT NULL,
  `city` VARCHAR(45) NOT NULL,
  `cellphone` CHAR(10) NULL,
  `cellphone_father` CHAR(10) NULL,
  `cellphone_mother` CHAR(10) NULL,
  `phone` CHAR(10) NULL,
  `email` VARCHAR(100) NULL,
  `lessons` TEXT NOT NULL,
  PRIMARY KEY (`pre_registration_id`),
  INDEX `last_name_first_name_idx` (`last_name` ASC, `first_name` ASC))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `ins_school`.`order`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `ins_school`.`order` (
  `order_id` SMALLINT UNSIGNED NOT NULL AUTO_INCREMENT,
  `member_id` SMALLINT UNSIGNED NOT NULL,
  `date` DATE NOT NULL,
  PRIMARY KEY (`order_id`),
  INDEX `fk_member_id_idx` (`member_id` ASC))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `ins_school`.`goody`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `ins_school`.`goody` (
  `goody_id` SMALLINT UNSIGNED NOT NULL AUTO_INCREMENT,
  `name` VARCHAR(45) NOT NULL,
  `description` TEXT NULL,
  `price` DECIMAL(4,2) NULL,
  `stock` SMALLINT UNSIGNED NOT NULL DEFAULT 0,
  PRIMARY KEY (`goody_id`),
  UNIQUE INDEX `name_UNIQUE` (`name` ASC))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `ins_school`.`contains`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `ins_school`.`contains` (
  `order_id` SMALLINT UNSIGNED NOT NULL,
  `goody_id` SMALLINT UNSIGNED NOT NULL,
  `quantity` SMALLINT UNSIGNED NOT NULL,
  PRIMARY KEY (`order_id`, `goody_id`),
  INDEX `fk_goody_id_idx` (`goody_id` ASC))
ENGINE = InnoDB;

USE `ins_school` ;

-- -----------------------------------------------------
-- function file_complete
-- -----------------------------------------------------

DELIMITER $$
USE `ins_school`$$
CREATE FUNCTION `file_complete` (p_file_id INT) RETURNS BOOLEAN
	READS SQL DATA
BEGIN
	DECLARE v_medical_certificate BOOLEAN;
    DECLARE v_insurance BOOLEAN;
    DECLARE v_photo BOOLEAN;

    SELECT medical_certificate, insurance, photo
    INTO v_medical_certificate, v_insurance, v_photo
    FROM file
    WHERE file_id = p_file_id;

    IF v_medical_certificate AND v_insurance AND v_photo THEN
		RETURN TRUE;
	ELSE
		RETURN FALSE;
	END IF;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- function lesson_num_subscribers
-- -----------------------------------------------------

DELIMITER $$
USE `ins_school`$$
CREATE FUNCTION `lesson_num_subscribers` (p_lesson_id INT) RETURNS INT
	READS SQL DATA
BEGIN
	DECLARE num_subscribers INT DEFAULT 0;
    DECLARE v_member_id INT;
    DECLARE done BOOLEAN DEFAULT FALSE;
    DECLARE participates_cursor CURSOR FOR
		SELECT member_id
        FROM participates
        WHERE lesson_id = p_lesson_id;
	DECLARE CONTINUE HANDLER FOR NOT FOUND SET done = TRUE;

    OPEN participates_cursor;

    read_loop: LOOP
		FETCH participates_cursor INTO v_member_id;
        IF done THEN
			LEAVE read_loop;
		END IF;

        SET num_subscribers = num_subscribers + 1;
	END LOOP;

    CLOSE participates_cursor;

    RETURN num_subscribers;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- function registration_amount
-- -----------------------------------------------------

DELIMITER $$
USE `ins_school`$$
CREATE FUNCTION `registration_amount` (p_registration_id INT) RETURNS DECIMAL(5,2)
	READS SQL DATA
BEGIN
	DECLARE v_price DECIMAL(5,2);
    DECLARE v_discount INT;

    SELECT price, discount
    INTO v_price, v_discount
    FROM registration
    WHERE registration_id = p_registration_id;

    RETURN v_price * (1 - v_discount / 100);
END$$

DELIMITER ;

-- -----------------------------------------------------
-- function registration_paid
-- -----------------------------------------------------

DELIMITER $$
USE `ins_school`$$
CREATE FUNCTION `registration_paid` (p_registration_id INT) RETURNS BOOLEAN
	READS SQL DATA
BEGIN
	IF registration_total_paid (p_registration_id) = registration_amount (p_registration_id) THEN
		RETURN TRUE;
	ELSE
		RETURN FALSE;
	END IF;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- function registration_total_paid
-- -----------------------------------------------------

DELIMITER $$
USE `ins_school`$$
CREATE FUNCTION `registration_total_paid` (p_registration_id INT) RETURNS DECIMAL(5,2)
	READS SQL DATA
BEGIN
	DECLARE total_paid DECIMAL(5,2) DEFAULT 0;
    DECLARE v_amount DECIMAL(5,2);
    DECLARE done BOOLEAN DEFAULT FALSE;
    DECLARE payment_cursor CURSOR FOR
		SELECT amount
        FROM payment
        WHERE registration_id = p_registration_id;
	DECLARE CONTINUE HANDLER FOR NOT FOUND SET done = TRUE;

    OPEN payment_cursor;

    read_loop: LOOP
		FETCH payment_cursor INTO v_amount;
        IF done THEN
			LEAVE read_loop;
		END IF;

        SET total_paid = total_paid + v_amount;
	END LOOP;

    CLOSE payment_cursor;

    RETURN total_paid;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- function lesson_duration
-- -----------------------------------------------------

DELIMITER $$
USE `ins_school`$$
CREATE FUNCTION `lesson_duration` (p_lesson_id INT) RETURNS TIME
	READS SQL DATA
BEGIN
	DECLARE v_start_time TIME;
    DECLARE v_end_time TIME;

    SELECT start_time, end_time
    INTO v_start_time, v_end_time
    FROM lesson
    WHERE lesson_id = p_lesson_id;

    RETURN v_end_time - v_start_time;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- function order_amount
-- -----------------------------------------------------

DELIMITER $$
USE `ins_school`$$
CREATE FUNCTION `order_amount` (p_order_id INT) RETURNS DECIMAL(5,2)
	READS SQL DATA
BEGIN
	DECLARE amount DECIMAL(5,2) DEFAULT 0;
    DECLARE v_quantity INT;
    DECLARE v_price DECIMAL(4,2);
    DECLARE done BOOLEAN DEFAULT FALSE;
    DECLARE contains_goody_cursor CURSOR FOR
		SELECT contains.quantity, goody.price
        FROM contains
        INNER JOIN goody
        ON contains.goody_id = goody.goody_id
		WHERE contains.order_id = p_order_id;
	DECLARE CONTINUE HANDLER FOR NOT FOUND SET done = TRUE;

    OPEN contains_goody_cursor;

    read_loop: LOOP
		FETCH contains_goody_cursor INTO v_quantity, v_price;
        IF done THEN
			LEAVE read_loop;
		END IF;

        SET amount = amount + v_quantity * v_price;
	END LOOP;

    CLOSE contains_goody_cursor;

    RETURN amount;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- function order_amount_goody
-- -----------------------------------------------------

DELIMITER $$
USE `ins_school`$$
CREATE FUNCTION `order_amount_goody` (p_order_id INT, p_goody_id INT) RETURNS DECIMAL(5,2)
	READS SQL DATA
BEGIN
    DECLARE v_quantity INT;
    DECLARE v_price DECIMAL(4,2);

    SELECT contains.quantity, goody.price
    INTO v_quantity, v_price
    FROM contains
    INNER JOIN goody
	ON contains.goody_id = goody.goody_id
    WHERE contains.order_id = p_order_id
	AND contains.goody_id = p_goody_id;

    RETURN v_quantity * v_price;
END$$

DELIMITER ;
CREATE USER 'insschooladmin' IDENTIFIED BY 'admin';

GRANT ALL ON `ins_school`.* TO 'insschooladmin';

SET SQL_MODE=@OLD_SQL_MODE;
SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS;
SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS;
